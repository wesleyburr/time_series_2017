data <- round(data.frame(lags = 0:lag, gamma=gam[1:(lag + 1)], rho=rho[1:(lag + 1)]), digit = dig)
output <- list("data" = data)
return(output)
}
test1 <- acf_arma(phi, theta, 20, 10)
acf_arma <- function( phi, theta, lag = 20, dig = 5 ) {
stopifnot(is.numeric( phi ), is.numeric( theta ),
is.vector( phi ), is.vector( theta ),
length( phi ) > 0, length( theta ) > 0,
is.numeric(lag),
is.numeric(dig), dig >= 1)
if (round(lag) != abs(lag)) {
lag <- ceiling(abs(lag))
}
if (round(dig) != dig) {
dig <- ceiling(dig)
}
if (phi[1] != 1) {
stop( "Leading coefficient of PHI must be 1.")
}
if (theta[1] != 1) {
stop( "Leading coefficient of THETA must be 1.")
}
#
# make sure it is casual
#
#k <- abs(polyroot(phi)) <= 1
#if (sum(k) != 0) {
#  warning( "Non casual ARMA, implementation might not be valid")
#}
#
#
# we first find psi=theta/phi
#
p <- length( phi )
q <- length( theta )
phi_1 <- c( phi, rep(0, max(q , lag) * 2) )
theta_1 <- c( theta, rep(0,max(q , lag) * 2) )
psi <- rep(0, max(q , lag))
psi[1] <- theta_1[1]
for (i in 2:max(q , lag)) {
psi[i] <- theta_1[i] - sum(psi[1:(i - 1)] * phi_1[i:2])
# here becaues the phi here is the actual coefficient
# (include the negative sign in front of it.)
# so we use "-" istead "+" it also cause some minor changes after)
}
#print(length(psi))
#
# method 2 find lag 1:p
#
#
# Left hand side
#
if (p == 1) {
l <- 1
}
else {
phi_2 <- c(rep(0,p),phi,rep(0,3 * p))
l <- matrix(c(phi_2[(p + 1):(2 * p)],rep(0,(p)^2 - p)),nrow=p,ncol=p,byrow=FALSE)
for (i in 1:p) {
for (j in 2:p) { #here we can see it does not work for AR
l[i,j] <- phi_2[p + i - (j - 1)]+phi_2[p + i + (j - 1)]
}
}
}
#print(l)
#
# right hand side
#
r <- rep(0,p)
for (i in 1:p) {
#
# we only need right hand side up to p. and we make the rest 0
#
if ( i <= q ) {
r[i] <- sum(psi[1:(q - i + 1)] * theta[i:q])
}
else {
r[i] <- 0
}
}
gam <- solve(l,r)
#
# method 3, we use existence gamma to find the rest
#
if ( (p - 1 ) < lag ) {
for (i in (p + 1):(lag + 1)) {
g <- - sum(phi[-1] * gam[(i - 1):(i - p + 1)])
print(phi[-1])
print(gam[(i - 1):(i - p + 1)])
gam <- c(gam, g)
}
}
#print(gam)
#
# output
#
rho <- gam / gam[1]
data <- round(data.frame(lags = 0:lag, gamma=gam[1:(lag + 1)], rho=rho[1:(lag + 1)]), digit = dig)
output <- list("data" = data)
return(output)
}
test1 <- acf_arma(phi, theta, 20, 10)
phi <- c(1,2)
test1 <- acf_arma(phi, theta, 20, 10)
test1
phi <- c(1)
acf_arma <- function( phi, theta, lag = 20, dig = 5 ) {
stopifnot(is.numeric( phi ), is.numeric( theta ),
is.vector( phi ), is.vector( theta ),
length( phi ) > 0, length( theta ) > 0,
is.numeric(lag),
is.numeric(dig), dig >= 1)
if (round(lag) != abs(lag)) {
lag <- ceiling(abs(lag))
}
if (round(dig) != dig) {
dig <- ceiling(dig)
}
if (phi[1] != 1) {
stop( "Leading coefficient of PHI must be 1.")
}
if (theta[1] != 1) {
stop( "Leading coefficient of THETA must be 1.")
}
#
# make sure it is casual
#
#k <- abs(polyroot(phi)) <= 1
#if (sum(k) != 0) {
#  warning( "Non casual ARMA, implementation might not be valid")
#}
#
#
# we first find psi=theta/phi
#
p <- length( phi )
q <- length( theta )
phi_1 <- c( phi, rep(0, max(q , lag) * 2) )
theta_1 <- c( theta, rep(0,max(q , lag) * 2) )
psi <- rep(0, max(q , lag))
psi[1] <- theta_1[1]
for (i in 2:max(q , lag)) {
psi[i] <- theta_1[i] - sum(psi[1:(i - 1)] * phi_1[i:2])
# here becaues the phi here is the actual coefficient
# (include the negative sign in front of it.)
# so we use "-" istead "+" it also cause some minor changes after)
}
#print(length(psi))
#
# method 2 find lag 1:p
#
#
# Left hand side
#
if (p == 1) {
l <- 1
}
else {
phi_2 <- c(rep(0,p),phi,rep(0,3 * p))
l <- matrix(c(phi_2[(p + 1):(2 * p)],rep(0,(p)^2 - p)),nrow=p,ncol=p,byrow=FALSE)
for (i in 1:p) {
for (j in 2:p) { #here we can see it does not work for AR
l[i,j] <- phi_2[p + i - (j - 1)]+phi_2[p + i + (j - 1)]
}
}
}
#print(l)
#
# right hand side
#
r <- rep(0,p)
for (i in 1:p) {
#
# we only need right hand side up to p. and we make the rest 0
#
if ( i <= q ) {
r[i] <- sum(psi[1:(q - i + 1)] * theta[i:q])
}
else {
r[i] <- 0
}
}
gam <- solve(l,r)
#
# method 3, we use existence gamma to find the rest
#
if ( (p - 1 ) < lag ) {
for (i in (p + 1):(lag + 1)) {
g <- - sum(phi[-1] * gam[(i - 1):(i - p + 1)])
print(phi[-1])
print(gam[(i - 1):(i - p + 1)])
gam <- c(gam, g)
}
}
#print(gam)
#
# output
#
rho <- gam / gam[1]
data <- round(data.frame(lags = 0:lag, gamma=gam[1:(lag + 1)], rho=rho[1:(lag + 1)]), digit = dig)
output <- list("data" = data)
return(output)
}
test1 <- acf_arma(phi, theta, 20, 10)
k <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
k
k[1:2,1,2]
k[1:2,1:2]
acf_arma <- function( phi, theta, lag = 20, dig = 5 ) {
stopifnot(is.numeric( phi ), is.numeric( theta ),
is.vector( phi ), is.vector( theta ),
length( phi ) > 0, length( theta ) > 0,
is.numeric(lag),
is.numeric(dig), dig >= 1)
if (round(lag) != abs(lag)) {
lag <- ceiling(abs(lag))
}
if (round(dig) != dig) {
dig <- ceiling(dig)
}
if (phi[1] != 1) {
stop( "Leading coefficient of PHI must be 1.")
}
if (theta[1] != 1) {
stop( "Leading coefficient of THETA must be 1.")
}
#
# make sure it is casual
#
#k <- abs(polyroot(phi)) <= 1
#if (sum(k) != 0) {
#  warning( "Non casual ARMA, implementation might not be valid")
#}
#
#
# we first find psi=theta/phi
#
p <- length( phi )
q <- length( theta )
phi_1 <- c( phi, rep(0, max(q , lag) * 2) )
theta_1 <- c( theta, rep(0,max(q , lag) * 2) )
psi <- rep(0, max(q , lag))
psi[1] <- theta_1[1]
for (i in 2:max(q , lag)) {
psi[i] <- theta_1[i] - sum(psi[1:(i - 1)] * phi_1[i:2])
# here becaues the phi here is the actual coefficient
# (include the negative sign in front of it.)
# so we use "-" istead "+" it also cause some minor changes after)
}
#print(length(psi))
#
# method 2 find lag 1:p
#
#
# Left hand side
#
if (p == 1) {
l <- 1
}
else {
phi_2 <- c(rep(0,p),phi,rep(0,3 * p))
l <- matrix(c(phi_2[(p + 1):(2 * p)],rep(0,(p)^2 - p)),nrow=p,ncol=p,byrow=FALSE)
for (i in 1:p) {
for (j in 2:p) { #here we can see it does not work for AR
l[i,j] <- phi_2[p + i - (j - 1)]+phi_2[p + i + (j - 1)]
}
}
}
#print(l)
#
# right hand side
#
r <- rep(0,p)
for (i in 1:max(p,q+1)) {
#
# we only need right hand side up to p. and we make the rest 0
#
if ( i <= q ) {
r[i] <- sum(psi[1:(q - i + 1)] * theta[i:q])
}
else {
r[i] <- 0
}
}
gam <- solve(l,r[1:p])
#
# method 3, we use existence gamma to find the rest
#
if ( (p - 1 ) < lag ) {
for (i in (p + 1):(lag + 1)) {
g <- - sum(phi[-1] * gam[(i - 1):(i - p + 1)]) +
print(phi[-1])
print(gam[(i - 1):(i - p + 1)])
gam <- c(gam, g)
}
}
#print(gam)
#
# output
#
rho <- gam / gam[1]
data <- round(data.frame(lags = 0:lag, gamma=gam[1:(lag + 1)], rho=rho[1:(lag + 1)]), digit = dig)
output <- list("data" = data)
return(output)
}
test1 <- acf_arma(phi, theta, 20, 10)
if ( (p - 1 ) < lag ) {
for (i in (p + 1):(lag + 1)) {
g <- - sum(phi[-1] * gam[(i - 1):(i - p + 1)]) + r[i]
print(phi[-1])
print(gam[(i - 1):(i - p + 1)])
gam <- c(gam, g)
}
}
acf_arma <- function( phi, theta, lag = 20, dig = 5 ) {
stopifnot(is.numeric( phi ), is.numeric( theta ),
is.vector( phi ), is.vector( theta ),
length( phi ) > 0, length( theta ) > 0,
is.numeric(lag),
is.numeric(dig), dig >= 1)
if (round(lag) != abs(lag)) {
lag <- ceiling(abs(lag))
}
if (round(dig) != dig) {
dig <- ceiling(dig)
}
if (phi[1] != 1) {
stop( "Leading coefficient of PHI must be 1.")
}
if (theta[1] != 1) {
stop( "Leading coefficient of THETA must be 1.")
}
#
# make sure it is casual
#
#k <- abs(polyroot(phi)) <= 1
#if (sum(k) != 0) {
#  warning( "Non casual ARMA, implementation might not be valid")
#}
#
#
# we first find psi=theta/phi
#
p <- length( phi )
q <- length( theta )
phi_1 <- c( phi, rep(0, max(q , lag) * 2) )
theta_1 <- c( theta, rep(0,max(q , lag) * 2) )
psi <- rep(0, max(q , lag))
psi[1] <- theta_1[1]
for (i in 2:max(q , lag)) {
psi[i] <- theta_1[i] - sum(psi[1:(i - 1)] * phi_1[i:2])
# here becaues the phi here is the actual coefficient
# (include the negative sign in front of it.)
# so we use "-" istead "+" it also cause some minor changes after)
}
#print(length(psi))
#
# method 2 find lag 1:p
#
#
# Left hand side
#
if (p == 1) {
l <- 1
}
else {
phi_2 <- c(rep(0,p),phi,rep(0,3 * p))
l <- matrix(c(phi_2[(p + 1):(2 * p)],rep(0,(p)^2 - p)),nrow=p,ncol=p,byrow=FALSE)
for (i in 1:p) {
for (j in 2:p) { #here we can see it does not work for AR
l[i,j] <- phi_2[p + i - (j - 1)]+phi_2[p + i + (j - 1)]
}
}
}
#print(l)
#
# right hand side
#
r <- rep(0,p)
for (i in 1:max(p,q+1)) {
#
# we only need right hand side up to p. and we make the rest 0
#
if ( i <= q ) {
r[i] <- sum(psi[1:(q - i + 1)] * theta[i:q])
}
else {
r[i] <- 0
}
}
gam <- solve(l,r[1:p])
#
# method 3, we use existence gamma to find the rest
#
if ( (p - 1 ) < lag ) {
for (i in (p + 1):(lag + 1)) {
g <- - sum(phi[-1] * gam[(i - 1):(i - p + 1)]) + r[i]
print(phi[-1])
print(gam[(i - 1):(i - p + 1)])
gam <- c(gam, g)
}
}
#print(gam)
#
# output
#
rho <- gam / gam[1]
data <- round(data.frame(lags = 0:lag, gamma=gam[1:(lag + 1)], rho=rho[1:(lag + 1)]), digit = dig)
output <- list("data" = data)
return(output)
}
test1 <- acf_arma(phi, theta, 20, 10)
test1
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(100))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1)
theta <- c(1,rnorm(10000))
lag <- 20
cov <- rep(0 , lag)
cov[1] <- sum(theta * theta)
for (i in 2:(lag+1)) {
cov[i] <- sum(theta[c(i:length(theta))] * theta[c(1:(length(theta)-i+1))])
}
test2 <- data.frame(lags = 0:lag, gamma = cov , rho = cov/cov[1])
test1 <- acf_arma(phi, theta, 20, 10)
test1$data-test2
phi <- c(1, rnorm(10))
theta <- c(1,rnorm(50))
acf_arma(phi, theta, 20, 10)
phi <- c(1, rnorm(1000))
theta <- c(1,rnorm(50))
acf_arma(phi, theta, 20, 10)
phi <- c(1, rnorm(1000))
theta <- c(1,rnorm(50))
acf_arma(phi, theta, 1, 10)
phi <- c(1, rnorm(1000))
theta <- c(1,rnorm(50000))
acf_arma(phi, theta, 1, 10)
phi <- c(1, rnorm(1000))
theta <- c(1,rnorm(500))
acf_arma(phi, theta, 1, 10)
phi <- c(1, rnorm(1000))
theta <- c(1,rnorm(5))
acf_arma(phi, theta, 20, 10)
phi <- c(1, rnorm(10))
theta <- c(1,rnorm(500))
acf_arma(phi, theta, 20, 10)
